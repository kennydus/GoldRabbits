#include "BigInt.h"
#include <map>

using namespace std;

BigInt goldRabbits(BigInt n) {
    static map<BigInt, BigInt> rabbit_map;

    // insert value BigInt(1) if n is 0 or 1
    if (n <= BigInt(1)) {
        rabbit_map.insert({n, BigInt(1)});
    }

    // check if the key exists for 'n'
    else if (rabbit_map.find(n) == rabbit_map.end())
        //it does not exist
        // make a key in the map and return the value of the key
        rabbit_map[n] = goldRabbits(n - BigInt(1)) + goldRabbits(n - BigInt(2));

    // value now exists for key 'n' inside of map- return the value
    return rabbit_map.at(n);
}

// this is the goldRabbits function
int goldRabbits(int n)
{
    // keeps track of all previously calculated results for goldRabbits(n)
    static map<int, int> int_rabbit_map;

    if (n==0 || n==1)
        int_rabbit_map.insert({n, 1});

    // if the key doesn't exist
    else if (int_rabbit_map.find(n) == int_rabbit_map.end()){
        int rabbits = goldRabbits(n - 1) + goldRabbits(n - 2);
        // checks for overflow. if rabbits < 0 (or negative), then we have overflow
        if (rabbits > 0)
            int_rabbit_map.insert({n, rabbits});
        else{
            string except = "Overflow Error - goldRabbits overflowed using " + to_string(n);
            throw except;
        }
    }
        //key exists, so return its value
        return int_rabbit_map.at(n);
}